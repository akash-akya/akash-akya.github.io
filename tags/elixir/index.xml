<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elixir on memdump</title>
    <link>https://akash-akya.github.io/tags/elixir/</link>
    <description>Recent content in Elixir on memdump</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Apr 2024 22:26:04 +0530</lastBuildDate><atom:link href="https://akash-akya.github.io/tags/elixir/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Video Streaming in Elixir</title>
      <link>https://akash-akya.github.io/posts/video-streaming-in-elixir/</link>
      <pubDate>Mon, 22 Apr 2024 22:26:04 +0530</pubDate>
      
      <guid>https://akash-akya.github.io/posts/video-streaming-in-elixir/</guid>
      <description>This is blog version of the Livebook. You can try interactive nootbook here
Mix.install([ {:req, &amp;#34;~&amp;gt; 0.4.5&amp;#34;}, {:ex_cmd, &amp;#34;~&amp;gt; 0.10&amp;#34;}, {:plug, &amp;#34;~&amp;gt; 1.15&amp;#34;}, {:kino, &amp;#34;~&amp;gt; 0.11&amp;#34;}, {:bandit, &amp;#34;~&amp;gt; 1.1&amp;#34;} ]) Introduction Port is standard way to run external programs in Elixir and Erlang. However, communicating with spawned external programs over stdio can lead to various issues. ExCmd and Exile libraries tries to address these issues. On top of that they provide beloved streaming capabilities.</description>
    </item>
    
    <item>
      <title>Document Auto Rotation</title>
      <link>https://akash-akya.github.io/posts/document-auto-rotation/</link>
      <pubDate>Mon, 25 Mar 2024 20:34:47 +0530</pubDate>
      
      <guid>https://akash-akya.github.io/posts/document-auto-rotation/</guid>
      <description>This is blog version of the Livebook. You can try interactive nootbook here
In this post, we&amp;rsquo;ll explore how to correct text image rotation using image processing methods such as Fourier Transformation, complex planes, and basic arithmetic operations.
This tutorial is heavily based on libvips blog post and a Stack Overflow answer.
Setup alias Vix.Vips.Image alias Vix.Vips.Operation # import convenience math operators `+`, `-`, `*` etc. use Vix.Operator {:ok, doc} = Image.</description>
    </item>
    
    <item>
      <title>Creating Rainbow using Vix ðŸŒˆ</title>
      <link>https://akash-akya.github.io/posts/creating-rainbow-in-vix/</link>
      <pubDate>Mon, 17 Apr 2023 16:46:49 +0530</pubDate>
      
      <guid>https://akash-akya.github.io/posts/creating-rainbow-in-vix/</guid>
      <description>This is a blog version of the Livebook. You can try the interactive version here
Mix.install([ {:vix, &amp;#34;~&amp;gt; 0.17.0&amp;#34;}, {:kino, &amp;#34;~&amp;gt; 0.9.1&amp;#34;} ]) Introduction Libvips provides over 300 image processing operations, but getting the intuition behind what is possible and how to combine the primitive image processing operations can be a challenging.
With this notebook we look into some and of the core operations while trying to achieve a simple goal, which is to generate a rainbow ðŸŒˆ.</description>
    </item>
    
    <item>
      <title>Composable Collectable in Elixir</title>
      <link>https://akash-akya.github.io/posts/composable-collectable/</link>
      <pubDate>Sun, 14 Nov 2021 08:47:00 +0530</pubDate>
      
      <guid>https://akash-akya.github.io/posts/composable-collectable/</guid>
      <description>Building composable collectable for fun and profit</description>
    </item>
    
    <item>
      <title>Elixir GitHub Action for Windows</title>
      <link>https://akash-akya.github.io/posts/setting_up_elixir_in_github_actions_for_windows/</link>
      <pubDate>Sun, 09 Aug 2020 15:00:00 +0530</pubDate>
      
      <guid>https://akash-akya.github.io/posts/setting_up_elixir_in_github_actions_for_windows/</guid>
      <description>Setting up Elixir in github actions for windows</description>
    </item>
    
    <item>
      <title>Navigating Elixir Standard Library in Emacs</title>
      <link>https://akash-akya.github.io/posts/elixir_source_in_emacs/</link>
      <pubDate>Mon, 13 May 2019 16:26:24 +0530</pubDate>
      
      <guid>https://akash-akya.github.io/posts/elixir_source_in_emacs/</guid>
      <description>Getting goto-definition work for Elixir core functions in Emacs</description>
    </item>
    
    <item>
      <title>Atoms in Elixir</title>
      <link>https://akash-akya.github.io/posts/atoms_in_elixir/</link>
      <pubDate>Tue, 01 Jan 2019 22:08:03 +0530</pubDate>
      
      <guid>https://akash-akya.github.io/posts/atoms_in_elixir/</guid>
      <description>Exploring Atoms in Elixir with REPL</description>
    </item>
    
  </channel>
</rss>
